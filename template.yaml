AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Just Wipes Backend

Globals:
  Api:
    Auth:
      Authorizers:
        CognitoAuth:
          UserPoolArn:
            - !GetAtt JustWipesCognitoUserPool.Arn
    
    # Allows API calls everywhere 
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
    GatewayResponses:
      DEFAULT_5xx:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'*'"
      DEFAULT_4xx:
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'*'"

Resources:
  JustWipesCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      MfaConfiguration: "OFF"
      Policies: 
        PasswordPolicy: 
           MinimumLength: 6
           RequireLowercase: False
           RequireNumbers: True
           RequireSymbols: False
           RequireUppercase: False
           TemporaryPasswordValidityDays: 3
      UsernameAttributes: 
        - "phone_number"
      LambdaConfig: 
        PreSignUp: !GetAtt PreSignUp.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallenge.Arn
      UsernameConfiguration: 
        CaseSensitive: False
      UserPoolName: "just-wipes-webapp"

  JustWipesCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        AccessTokenValidity: 1
        ClientName: "just-wipes-webapp"
        ExplicitAuthFlows: 
          - "ALLOW_CUSTOM_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"
        GenerateSecret: False
        IdTokenValidity: 1
        PreventUserExistenceErrors: "ENABLED"
        RefreshTokenValidity: 1
        UserPoolId: !Ref JustWipesCognitoUserPool

  PreSignUp:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: nodejs10.x
      CodeUri: ./lambdas/cognito/pre-sign-up
      Description: 'Lambda function for cognito pre signup trigger'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/CognitoLambdaRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627

  DefineAuthChallenge:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: nodejs10.x
      CodeUri: ./lambdas/cognito/define-auth-challenge
      Description: 'Lambda function for cognito define auth challenge trigger'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/CognitoLambdaRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627
      
  CreateAuthChallenge:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: nodejs10.x
      CodeUri: ./lambdas/cognito/create-auth-challenge
      Description: 'Lambda function for cognito create auth challenge trigger'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/CognitoLambdaRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627

  VerifyAuthChallenge:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: nodejs10.x
      CodeUri: ./lambdas/cognito/verify-auth-challenge
      Description: 'Lambda function for cognito verify auth challenge trigger'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/CognitoLambdaRole'
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627

  GetUserData:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: python3.7
      CodeUri: ./lambdas/data/get-by-phone
      Description: 'Lambda function to get user data from s3 bucket'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/LambdaRole'
      Events:
        function:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /data/get-by-phone
            Method: post
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627

  AddPurchase:
    Type: 'AWS::Serverless::Function'
    Properties:    
      Handler: function.handler
      Runtime: python3.7
      CodeUri: ./lambdas/data/add-by-phone
      Description: 'Lambda function to add user data to s3 bucket file'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::672841565100:role/LambdaRole'
      Events:
        function:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /data/add-by-phone
            Method: post
      VpcConfig:
        SecurityGroupIds:
          - sg-fb2c0281
        SubnetIds:
          - subnet-0afb59bb4aef42c2c
          - subnet-03576e05e1e4e7a10
          - subnet-0c012bb7fafb41627
